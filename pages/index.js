import Head from "next/head";
import Link from "next/link";
import { useState, useEffect } from "react";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { Line, Bar } from "react-chartjs-2";
import { useAppContext } from "../components/context";
import {
  FormLayout,
  SliderInput,
  RadioButton,
  InputBox,
  SelectBox,
  ResultsLayout,
} from "../components/utils";
import {
  ChevronLeft,
  Settings,
  Trending,
  ThumbsUp,
  GithubLink,
} from "../components/icons";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const TestPage = () => {
  const {
    Population,
    options,
    data,
    genMembers,
    targetString,
    setTargetString,
    populationSize,
    setPopulationSize,
    generationCount,
    setGenerationCount,
    correctValsCount,
    mutationInputRate,
    setMutationInputRate,
    isLoading,
    setIsLoading,
    chartDataY,
  } = useAppContext();

  const [count, setCount] = useState(targetString.length);
  const [chartType, setChartType] = useState("line");
  const [navIsOpen, setNavIsOpen] = useState(false);
  const [resultsGen, setResultsGen] = useState(generationCount);

  const handleGenerate = (
    e,
    populationSize,
    target,
    mutationRate,
    generations
  ) => {
    e.preventDefault();
    if (populationSize > 200 || !target.length || generations > 300) return;
    setIsLoading(true);
    const population = new Population(populationSize, target, mutationRate);
    population.evolve(generations);
    setResultsGen(generations);
    setIsLoading(false);
  };

  const handleGenerateOnMount = (
    populationSize,
    target,
    mutationRate,
    generations
  ) => {
    const population = new Population(populationSize, target, mutationRate);
    population.evolve(generations);
    setIsLoading(false);
  };

  const handleTextChange = (e) => {
    const target = e.target.value.replace(/\s+/g, "");
    const countValue = target.length;
    setTargetString(target.toLowerCase());
    setCount(countValue);
  };

  useEffect(() => {
    handleGenerateOnMount(
      populationSize,
      targetString,
      mutationInputRate,
      generationCount
    );
  }, []);
  return (
    <div className="min-h-screen lg:flex relative lg:pl-80">
      <Head>
        <title>Word Matching - Genetic Algorithm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* overlay */}
      {navIsOpen && (
        <div
          onClick={() => setNavIsOpen(false)}
          className="fixed z-10 inset-0 w-full h-full bg-slate-900 opacity-30 lg:hidden"
        ></div>
      )}

      {/* mobile navbar */}
      <div className="fixed bg-white lg:bg-transparent p-2 w-full flex items-center justify-between lg:hidden">
        <button onClick={() => setNavIsOpen(true)} className="sidebar-open-btn">
          <Settings className="h-5 w-5 sm:h-7 sm:w-7" />
        </button>
        <GithubLink />
      </div>

      {/* SIDEBAR */}
      <nav
        className={`${
          navIsOpen === true ? "translate-x-0" : "-translate-x-full"
        } fixed inset-0 lg:transform-none duration-200 z-10 w-60 sm:w-80 bg-slate-100 flex items-center justify-center`}
      >
        <button
          onClick={() => setNavIsOpen(false)}
          className="sidebar-close-btn"
        >
          <ChevronLeft className="h-5 w-5 sm:h-7 sm:w-7" />
        </button>
        <GithubLink className="absolute bottom-2 right-2 hidden lg:block border-slate-100" />
        <div className="space-y-8 w-full px-4 sm:px-6">
          <h3 className="font-semibold">Settings</h3>
          <form
            className="space-y-8"
            onSubmit={(e) =>
              handleGenerate(
                e,
                Math.abs(populationSize),
                targetString,
                mutationInputRate,
                Math.abs(generationCount)
              )
            }
          >
            <FormLayout inputLabel="Target String" condition="(letters only)">
              <div className="relative">
                <InputBox
                  type="text"
                  maxLength="4"
                  value={targetString}
                  onChange={handleTextChange}
                  isLoading={isLoading}
                />
                <p className="absolute top-4 right-2 font-light text-slate-400">
                  Limit: {count}/4
                </p>
              </div>
            </FormLayout>
            <FormLayout
              inputLabel="Population Size"
              condition="(min 20, max 200)"
            >
              <InputBox
                type="number"
                min="20"
                max="200"
                value={populationSize}
                onChange={(e) => setPopulationSize(e.target.value)}
                isLoading={isLoading}
              />
            </FormLayout>
            <FormLayout inputLabel="Mutation Rate">
              <SelectBox
                value={mutationInputRate}
                onChange={(e) => setMutationInputRate(e.target.value)}
                isLoading={isLoading}
              />
            </FormLayout>
            <FormLayout
              inputLabel="Generation Count"
              condition={`: ${generationCount}`}
            >
              <SliderInput
                value={generationCount}
                min={50}
                max={300}
                onChange={(e) => setGenerationCount(e.target.value)}
              />
            </FormLayout>
            <FormLayout inputLabel="Chart Type">
              <div
                onChange={(e) => setChartType(e.target.value)}
                className="space-x-8"
              >
                <RadioButton label="Line" value="line" chartType={chartType} />
                <RadioButton label="Bar" value="bar" chartType={chartType} />
              </div>
            </FormLayout>
            <button className="btn-primary" type="submit" disabled={isLoading}>
              Generate
            </button>
          </form>
        </div>
      </nav>
      {/* MAIN-CONTAINER */}
      <div className="main-container overflow-auto">
        <div className="space-y-4">
          <h1 className="font-bold">Genetic Algorithm</h1>
        </div>
        {/* table */}
        <div className="space-y-6">
          <h2 className="font-semibold">Evolutions Table</h2>
          <div className="overflow-auto h-96">
            <table className="">
              <thead>
                <tr>
                  <th className="text-center">Generation</th>
                  <th className="px-4 md:px-16 text-center">Fitness</th>
                  <th className="text-left">Population</th>
                </tr>
              </thead>
              <tbody className="divide-y">
                {genMembers.map((members, i) => (
                  <tr key={i}>
                    <td className="text-center p-4">{i + 1}</td>
                    <td className="text-center">{correctValsCount[i]}</td>
                    <td className="">{members.join("_")}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        {/* results section */}
        <div className="space-y-6">
          <h2 className="font-semibold">Results</h2>
          <ResultsLayout
            label={`${resultsGen} GENERATIONS:`}
            spanText={`${chartDataY[chartDataY.length - 1]} members`}
            pText="matched the target string"
          >
            <ThumbsUp className="h-5 w-5 sm:h-7 sm:w-7 text-blue-500" />
          </ResultsLayout>
          <ResultsLayout
            label="HIGHEST:"
            spanText={`${Math.max(...chartDataY)} members`}
            pText={`matched at generation ${
              chartDataY.indexOf(Math.max(...chartDataY)) + 1
            }`}
          >
            <Trending className="h-5 w-5 sm:h-7 sm:w-7 text-green-600" />
          </ResultsLayout>
        </div>
        {/* chart */}
        <div className="space-y-4">
          <h2 className="font-semibold">Fitness Value Chart</h2>
          <div>
            {chartType === "line" ? (
              <Line options={options} data={data} />
            ) : (
              <Bar options={options} data={data} />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TestPage;
