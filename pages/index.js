import Head from "next/head";
import { useState, useEffect } from "react";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { Line } from "react-chartjs-2";
import { useAppContext } from "../components/utils/context";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

export default function Home() {
  const {
    Population,
    options,
    data,
    genMembers,
    targetString,
    setTargetString,
    populationSize,
    setPopulationSize,
    generationCount,
    correctValsCount,
  } = useAppContext();

  const handleGenerate = (
    e,
    populationSize,
    target,
    mutationRate,
    generations
  ) => {
    e.preventDefault();
    if (populationSize > 100 || !target.length || generations > 500) return;
    const population = new Population(populationSize, target, mutationRate);
    population.evolve(generations);
  };

  const handleGenerateOnMount = (
    populationSize,
    target,
    mutationRate,
    generations
  ) => {
    const population = new Population(populationSize, target, mutationRate);
    population.evolve(generations);
  };

  useEffect(() => {
    handleGenerateOnMount(populationSize, targetString, 0.05, generationCount);
  }, []);

  return (
    <div className="min-h-screen flex">
      <Head>
        <title>Genetic Algorithm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* sidebar */}
      <div className="side-bar">
        <h3 className="font-semibold">Settings</h3>
        <form
          className="space-y-6"
          onSubmit={(e) =>
            handleGenerate(
              e,
              Math.abs(populationSize),
              targetString,
              0.05,
              Math.abs(generationCount)
            )
          }
        >
          <input
            className="input-outline"
            required
            maxLength="5"
            type="text"
            value={targetString}
            onChange={(e) => setTargetString(e.target.value)}
          />
          <input
            className="input-outline"
            required
            type="number"
            min="20"
            max="100"
            value={populationSize}
            onChange={(e) => setPopulationSize(e.target.value)}
          />
          <input
            className="input-outline"
            required
            type="number"
            min="50"
            max="500"
            value={generationCount}
            onChange={(e) => setGenerationCount(e.target.value)}
          />
          <button className="btn-primary" type="submit">
            SUBMIT
          </button>
        </form>
      </div>
      {/* main-container */}
      <div className="main-container">
        <h1 className="font-bold">Genetic Algorithm</h1>
        <h2 className="font-medium">Fitness Value Chart</h2>
        <div className="">
          <Line options={options} data={data} />
        </div>
        <div className="border">
          {genMembers.map((item, i) => (
            <>
              <div>{[item]}</div>
              <div>{[correctValsCount[i]]}</div>
            </>
          ))}
        </div>
      </div>
    </div>
  );
}
