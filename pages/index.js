import Head from "next/head";
import { useState, useEffect } from "react";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";
import { Line, Bar } from "react-chartjs-2";
import { useAppContext } from "../components/utils/context";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

export default function Home() {
  const [chartType, setChartType] = useState();

  const {
    Population,
    options,
    data,
    genMembers,
    targetString,
    setTargetString,
    populationSize,
    setPopulationSize,
    generationCount,
    setGenerationCount,
    correctValsCount,
  } = useAppContext();

  const handleGenerate = (
    e,
    populationSize,
    target,
    mutationRate,
    generations
  ) => {
    e.preventDefault();
    if (populationSize > 100 || !target.length || generations > 300) return;
    const population = new Population(populationSize, target, mutationRate);
    population.evolve(generations);
  };

  const handleGenerateOnMount = (
    populationSize,
    target,
    mutationRate,
    generations
  ) => {
    const population = new Population(populationSize, target, mutationRate);
    population.evolve(generations);
  };

  useEffect(() => {
    handleGenerateOnMount(populationSize, targetString, 0.05, generationCount);
  }, []);

  return (
    <div className="min-h-screen flex">
      <Head>
        <title>Genetic Algorithm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* sidebar */}
      <div className="side-bar">
        <h3 className="font-semibold">Settings</h3>
        <form
          className="space-y-6"
          onSubmit={(e) =>
            handleGenerate(
              e,
              Math.abs(populationSize),
              targetString,
              0.05,
              Math.abs(generationCount)
            )
          }
        >
          <input
            className="input-outline"
            required
            maxLength="4"
            type="text"
            value={targetString}
            onChange={(e) => setTargetString(e.target.value)}
          />
          <input
            className="input-outline"
            required
            type="number"
            min="20"
            max="100"
            value={populationSize}
            onChange={(e) => setPopulationSize(e.target.value)}
          />
          <input
            className="input-outline"
            required
            type="number"
            min="50"
            max="300"
            value={generationCount}
            onChange={(e) => setGenerationCount(e.target.value)}
          />
          <button className="btn-primary" type="submit">
            SUBMIT
          </button>
        </form>
      </div>
      {/* main-container */}
      <div className="main-container">
        <h1 className="font-bold">Genetic Algorithm</h1>
        {/* <div className="overflow-auto h-80">
          {genMembers.map((members, i) => (
            <div className="flex space-x-4" key={i}>
              <h3>Generation:{i + 1}</h3>
              <p className="p-8 overflow-auto">{members.join("_")}</p>
              <div>{correctValsCount[i]}</div>
            </div>
          ))} */}

        <div className="overflow-auto h-96">
          <table className="w-full">
            <thead>
              <tr>
                <th className="text-center">Generation</th>
                <th className="px-4 md:px-16 text-center">Fitness</th>
                <th className="text-left">Population</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {genMembers.map((members, i) => (
                <tr key={i}>
                  <td className="text-center p-4">{i + 1}</td>
                  <td className="text-center">{correctValsCount[i]}</td>
                  <td className="">{members.join("_")}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        {/* </div> */}
        <div className="">
          <h2 className="font-medium">Fitness Value Chart</h2>
          <div className="">
            {/* <Bar options={options} data={data} /> */}
            <Line options={options} data={data} />
          </div>
        </div>
      </div>
    </div>
  );
}
